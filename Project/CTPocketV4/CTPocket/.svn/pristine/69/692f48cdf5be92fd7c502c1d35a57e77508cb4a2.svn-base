// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Client_report_proto.pb.h"

@implementation ClientReportProtoRoot
static ES_PBExtensionRegistry* extensionRegistry = nil;
+ (ES_PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ClientReportProtoRoot class]) {
    ES_PBMutableExtensionRegistry* registry = [ES_PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(ES_PBMutableExtensionRegistry*) registry {
}
@end

@interface ObsoleteErrorReport ()
@property (retain) NSString* reportId;
@property (retain) NSString* appVersionCode;
@property (retain) NSString* appVersionName;
@property (retain) NSString* phoneModel;
@property (retain) NSString* brand;
@property (retain) NSString* product;
@property (retain) NSString* osVersion;
@property int32_t totalMemSize;
@property int32_t availableMemSize;
@property (retain) NSString* stackTrace;
@property (retain) NSString* userAppStartTime;
@property (retain) NSString* userAppCrashTime;
@end

@implementation ObsoleteErrorReport

- (BOOL) hasReportId {
  return !!hasReportId_;
}
- (void) setHasReportId:(BOOL) value_ {
  hasReportId_ = !!value_;
}
@synthesize reportId;
- (BOOL) hasAppVersionCode {
  return !!hasAppVersionCode_;
}
- (void) setHasAppVersionCode:(BOOL) value_ {
  hasAppVersionCode_ = !!value_;
}
@synthesize appVersionCode;
- (BOOL) hasAppVersionName {
  return !!hasAppVersionName_;
}
- (void) setHasAppVersionName:(BOOL) value_ {
  hasAppVersionName_ = !!value_;
}
@synthesize appVersionName;
- (BOOL) hasPhoneModel {
  return !!hasPhoneModel_;
}
- (void) setHasPhoneModel:(BOOL) value_ {
  hasPhoneModel_ = !!value_;
}
@synthesize phoneModel;
- (BOOL) hasBrand {
  return !!hasBrand_;
}
- (void) setHasBrand:(BOOL) value_ {
  hasBrand_ = !!value_;
}
@synthesize brand;
- (BOOL) hasProduct {
  return !!hasProduct_;
}
- (void) setHasProduct:(BOOL) value_ {
  hasProduct_ = !!value_;
}
@synthesize product;
- (BOOL) hasOsVersion {
  return !!hasOsVersion_;
}
- (void) setHasOsVersion:(BOOL) value_ {
  hasOsVersion_ = !!value_;
}
@synthesize osVersion;
- (BOOL) hasTotalMemSize {
  return !!hasTotalMemSize_;
}
- (void) setHasTotalMemSize:(BOOL) value_ {
  hasTotalMemSize_ = !!value_;
}
@synthesize totalMemSize;
- (BOOL) hasAvailableMemSize {
  return !!hasAvailableMemSize_;
}
- (void) setHasAvailableMemSize:(BOOL) value_ {
  hasAvailableMemSize_ = !!value_;
}
@synthesize availableMemSize;
- (BOOL) hasStackTrace {
  return !!hasStackTrace_;
}
- (void) setHasStackTrace:(BOOL) value_ {
  hasStackTrace_ = !!value_;
}
@synthesize stackTrace;
- (BOOL) hasUserAppStartTime {
  return !!hasUserAppStartTime_;
}
- (void) setHasUserAppStartTime:(BOOL) value_ {
  hasUserAppStartTime_ = !!value_;
}
@synthesize userAppStartTime;
- (BOOL) hasUserAppCrashTime {
  return !!hasUserAppCrashTime_;
}
- (void) setHasUserAppCrashTime:(BOOL) value_ {
  hasUserAppCrashTime_ = !!value_;
}
@synthesize userAppCrashTime;
- (void) dealloc {
  self.reportId = nil;
  self.appVersionCode = nil;
  self.appVersionName = nil;
  self.phoneModel = nil;
  self.brand = nil;
  self.product = nil;
  self.osVersion = nil;
  self.stackTrace = nil;
  self.userAppStartTime = nil;
  self.userAppCrashTime = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.reportId = @"";
    self.appVersionCode = @"";
    self.appVersionName = @"";
    self.phoneModel = @"";
    self.brand = @"";
    self.product = @"";
    self.osVersion = @"";
    self.totalMemSize = 0;
    self.availableMemSize = 0;
    self.stackTrace = @"";
    self.userAppStartTime = @"";
    self.userAppCrashTime = @"";
  }
  return self;
}
static ObsoleteErrorReport* defaultObsoleteErrorReportInstance = nil;
+ (void) initialize {
  if (self == [ObsoleteErrorReport class]) {
    defaultObsoleteErrorReportInstance = [[ObsoleteErrorReport alloc] init];
  }
}
+ (ObsoleteErrorReport*) defaultInstance {
  return defaultObsoleteErrorReportInstance;
}
- (ObsoleteErrorReport*) defaultInstance {
  return defaultObsoleteErrorReportInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(ES_PBCodedOutputStream*) output {
  if (self.hasReportId) {
    [output writeString:1 value:self.reportId];
  }
  if (self.hasAppVersionCode) {
    [output writeString:2 value:self.appVersionCode];
  }
  if (self.hasAppVersionName) {
    [output writeString:3 value:self.appVersionName];
  }
  if (self.hasPhoneModel) {
    [output writeString:4 value:self.phoneModel];
  }
  if (self.hasBrand) {
    [output writeString:5 value:self.brand];
  }
  if (self.hasProduct) {
    [output writeString:6 value:self.product];
  }
  if (self.hasOsVersion) {
    [output writeString:7 value:self.osVersion];
  }
  if (self.hasTotalMemSize) {
    [output writeInt32:8 value:self.totalMemSize];
  }
  if (self.hasAvailableMemSize) {
    [output writeInt32:9 value:self.availableMemSize];
  }
  if (self.hasStackTrace) {
    [output writeString:10 value:self.stackTrace];
  }
  if (self.hasUserAppStartTime) {
    [output writeString:11 value:self.userAppStartTime];
  }
  if (self.hasUserAppCrashTime) {
    [output writeString:12 value:self.userAppCrashTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasReportId) {
    size_ += ES_computeStringSize(1, self.reportId);
  }
  if (self.hasAppVersionCode) {
    size_ += ES_computeStringSize(2, self.appVersionCode);
  }
  if (self.hasAppVersionName) {
    size_ += ES_computeStringSize(3, self.appVersionName);
  }
  if (self.hasPhoneModel) {
    size_ += ES_computeStringSize(4, self.phoneModel);
  }
  if (self.hasBrand) {
    size_ += ES_computeStringSize(5, self.brand);
  }
  if (self.hasProduct) {
    size_ += ES_computeStringSize(6, self.product);
  }
  if (self.hasOsVersion) {
    size_ += ES_computeStringSize(7, self.osVersion);
  }
  if (self.hasTotalMemSize) {
    size_ += ES_computeInt32Size(8, self.totalMemSize);
  }
  if (self.hasAvailableMemSize) {
    size_ += ES_computeInt32Size(9, self.availableMemSize);
  }
  if (self.hasStackTrace) {
    size_ += ES_computeStringSize(10, self.stackTrace);
  }
  if (self.hasUserAppStartTime) {
    size_ += ES_computeStringSize(11, self.userAppStartTime);
  }
  if (self.hasUserAppCrashTime) {
    size_ += ES_computeStringSize(12, self.userAppCrashTime);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ObsoleteErrorReport*) parseFromData:(NSData*) data {
  return (ObsoleteErrorReport*)[[[ObsoleteErrorReport builder] mergeFromData:data] build];
}
+ (ObsoleteErrorReport*) parseFromData:(NSData*) data extensionRegistry:(ES_PBExtensionRegistry*) extensionRegistry {
  return (ObsoleteErrorReport*)[[[ObsoleteErrorReport builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ObsoleteErrorReport*) parseFromInputStream:(NSInputStream*) input {
  return (ObsoleteErrorReport*)[[[ObsoleteErrorReport builder] mergeFromInputStream:input] build];
}
+ (ObsoleteErrorReport*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(ES_PBExtensionRegistry*) extensionRegistry {
  return (ObsoleteErrorReport*)[[[ObsoleteErrorReport builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ObsoleteErrorReport*) parseFromCodedInputStream:(ES_PBCodedInputStream*) input {
  return (ObsoleteErrorReport*)[[[ObsoleteErrorReport builder] mergeFromCodedInputStream:input] build];
}
+ (ObsoleteErrorReport*) parseFromCodedInputStream:(ES_PBCodedInputStream*) input extensionRegistry:(ES_PBExtensionRegistry*) extensionRegistry {
  return (ObsoleteErrorReport*)[[[ObsoleteErrorReport builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ObsoleteErrorReport_Builder*) builder {
  return [[[ObsoleteErrorReport_Builder alloc] init] autorelease];
}
+ (ObsoleteErrorReport_Builder*) builderWithPrototype:(ObsoleteErrorReport*) prototype {
  return [[ObsoleteErrorReport builder] mergeFrom:prototype];
}
- (ObsoleteErrorReport_Builder*) builder {
  return [ObsoleteErrorReport builder];
}
- (ObsoleteErrorReport_Builder*) toBuilder {
  return [ObsoleteErrorReport builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasReportId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reportId", self.reportId];
  }
  if (self.hasAppVersionCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appVersionCode", self.appVersionCode];
  }
  if (self.hasAppVersionName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appVersionName", self.appVersionName];
  }
  if (self.hasPhoneModel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"phoneModel", self.phoneModel];
  }
  if (self.hasBrand) {
    [output appendFormat:@"%@%@: %@\n", indent, @"brand", self.brand];
  }
  if (self.hasProduct) {
    [output appendFormat:@"%@%@: %@\n", indent, @"product", self.product];
  }
  if (self.hasOsVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"osVersion", self.osVersion];
  }
  if (self.hasTotalMemSize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalMemSize", [NSNumber numberWithInt:self.totalMemSize]];
  }
  if (self.hasAvailableMemSize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"availableMemSize", [NSNumber numberWithInt:self.availableMemSize]];
  }
  if (self.hasStackTrace) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stackTrace", self.stackTrace];
  }
  if (self.hasUserAppStartTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userAppStartTime", self.userAppStartTime];
  }
  if (self.hasUserAppCrashTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userAppCrashTime", self.userAppCrashTime];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ObsoleteErrorReport class]]) {
    return NO;
  }
  ObsoleteErrorReport *otherMessage = other;
  return
      self.hasReportId == otherMessage.hasReportId &&
      (!self.hasReportId || [self.reportId isEqual:otherMessage.reportId]) &&
      self.hasAppVersionCode == otherMessage.hasAppVersionCode &&
      (!self.hasAppVersionCode || [self.appVersionCode isEqual:otherMessage.appVersionCode]) &&
      self.hasAppVersionName == otherMessage.hasAppVersionName &&
      (!self.hasAppVersionName || [self.appVersionName isEqual:otherMessage.appVersionName]) &&
      self.hasPhoneModel == otherMessage.hasPhoneModel &&
      (!self.hasPhoneModel || [self.phoneModel isEqual:otherMessage.phoneModel]) &&
      self.hasBrand == otherMessage.hasBrand &&
      (!self.hasBrand || [self.brand isEqual:otherMessage.brand]) &&
      self.hasProduct == otherMessage.hasProduct &&
      (!self.hasProduct || [self.product isEqual:otherMessage.product]) &&
      self.hasOsVersion == otherMessage.hasOsVersion &&
      (!self.hasOsVersion || [self.osVersion isEqual:otherMessage.osVersion]) &&
      self.hasTotalMemSize == otherMessage.hasTotalMemSize &&
      (!self.hasTotalMemSize || self.totalMemSize == otherMessage.totalMemSize) &&
      self.hasAvailableMemSize == otherMessage.hasAvailableMemSize &&
      (!self.hasAvailableMemSize || self.availableMemSize == otherMessage.availableMemSize) &&
      self.hasStackTrace == otherMessage.hasStackTrace &&
      (!self.hasStackTrace || [self.stackTrace isEqual:otherMessage.stackTrace]) &&
      self.hasUserAppStartTime == otherMessage.hasUserAppStartTime &&
      (!self.hasUserAppStartTime || [self.userAppStartTime isEqual:otherMessage.userAppStartTime]) &&
      self.hasUserAppCrashTime == otherMessage.hasUserAppCrashTime &&
      (!self.hasUserAppCrashTime || [self.userAppCrashTime isEqual:otherMessage.userAppCrashTime]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasReportId) {
    hashCode = hashCode * 31 + [self.reportId hash];
  }
  if (self.hasAppVersionCode) {
    hashCode = hashCode * 31 + [self.appVersionCode hash];
  }
  if (self.hasAppVersionName) {
    hashCode = hashCode * 31 + [self.appVersionName hash];
  }
  if (self.hasPhoneModel) {
    hashCode = hashCode * 31 + [self.phoneModel hash];
  }
  if (self.hasBrand) {
    hashCode = hashCode * 31 + [self.brand hash];
  }
  if (self.hasProduct) {
    hashCode = hashCode * 31 + [self.product hash];
  }
  if (self.hasOsVersion) {
    hashCode = hashCode * 31 + [self.osVersion hash];
  }
  if (self.hasTotalMemSize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.totalMemSize] hash];
  }
  if (self.hasAvailableMemSize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.availableMemSize] hash];
  }
  if (self.hasStackTrace) {
    hashCode = hashCode * 31 + [self.stackTrace hash];
  }
  if (self.hasUserAppStartTime) {
    hashCode = hashCode * 31 + [self.userAppStartTime hash];
  }
  if (self.hasUserAppCrashTime) {
    hashCode = hashCode * 31 + [self.userAppCrashTime hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ObsoleteErrorReport_Builder()
@property (retain) ObsoleteErrorReport* result;
@end

@implementation ObsoleteErrorReport_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[ObsoleteErrorReport alloc] init] autorelease];
  }
  return self;
}
- (ES_PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ObsoleteErrorReport_Builder*) clear {
  self.result = [[[ObsoleteErrorReport alloc] init] autorelease];
  return self;
}
- (ObsoleteErrorReport_Builder*) clone {
  return [ObsoleteErrorReport builderWithPrototype:result];
}
- (ObsoleteErrorReport*) defaultInstance {
  return [ObsoleteErrorReport defaultInstance];
}
- (ObsoleteErrorReport*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ObsoleteErrorReport*) buildPartial {
  ObsoleteErrorReport* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (ObsoleteErrorReport_Builder*) mergeFrom:(ObsoleteErrorReport*) other {
  if (other == [ObsoleteErrorReport defaultInstance]) {
    return self;
  }
  if (other.hasReportId) {
    [self setReportId:other.reportId];
  }
  if (other.hasAppVersionCode) {
    [self setAppVersionCode:other.appVersionCode];
  }
  if (other.hasAppVersionName) {
    [self setAppVersionName:other.appVersionName];
  }
  if (other.hasPhoneModel) {
    [self setPhoneModel:other.phoneModel];
  }
  if (other.hasBrand) {
    [self setBrand:other.brand];
  }
  if (other.hasProduct) {
    [self setProduct:other.product];
  }
  if (other.hasOsVersion) {
    [self setOsVersion:other.osVersion];
  }
  if (other.hasTotalMemSize) {
    [self setTotalMemSize:other.totalMemSize];
  }
  if (other.hasAvailableMemSize) {
    [self setAvailableMemSize:other.availableMemSize];
  }
  if (other.hasStackTrace) {
    [self setStackTrace:other.stackTrace];
  }
  if (other.hasUserAppStartTime) {
    [self setUserAppStartTime:other.userAppStartTime];
  }
  if (other.hasUserAppCrashTime) {
    [self setUserAppCrashTime:other.userAppCrashTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ObsoleteErrorReport_Builder*) mergeFromCodedInputStream:(ES_PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[ES_PBExtensionRegistry emptyRegistry]];
}
- (ObsoleteErrorReport_Builder*) mergeFromCodedInputStream:(ES_PBCodedInputStream*) input extensionRegistry:(ES_PBExtensionRegistry*) extensionRegistry {
  ES_PBUnknownFieldSet_Builder* unknownFields = [ES_PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setReportId:[input readString]];
        break;
      }
      case 18: {
        [self setAppVersionCode:[input readString]];
        break;
      }
      case 26: {
        [self setAppVersionName:[input readString]];
        break;
      }
      case 34: {
        [self setPhoneModel:[input readString]];
        break;
      }
      case 42: {
        [self setBrand:[input readString]];
        break;
      }
      case 50: {
        [self setProduct:[input readString]];
        break;
      }
      case 58: {
        [self setOsVersion:[input readString]];
        break;
      }
      case 64: {
        [self setTotalMemSize:[input readInt32]];
        break;
      }
      case 72: {
        [self setAvailableMemSize:[input readInt32]];
        break;
      }
      case 82: {
        [self setStackTrace:[input readString]];
        break;
      }
      case 90: {
        [self setUserAppStartTime:[input readString]];
        break;
      }
      case 98: {
        [self setUserAppCrashTime:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasReportId {
  return result.hasReportId;
}
- (NSString*) reportId {
  return result.reportId;
}
- (ObsoleteErrorReport_Builder*) setReportId:(NSString*) value {
  result.hasReportId = YES;
  result.reportId = value;
  return self;
}
- (ObsoleteErrorReport_Builder*) clearReportId {
  result.hasReportId = NO;
  result.reportId = @"";
  return self;
}
- (BOOL) hasAppVersionCode {
  return result.hasAppVersionCode;
}
- (NSString*) appVersionCode {
  return result.appVersionCode;
}
- (ObsoleteErrorReport_Builder*) setAppVersionCode:(NSString*) value {
  result.hasAppVersionCode = YES;
  result.appVersionCode = value;
  return self;
}
- (ObsoleteErrorReport_Builder*) clearAppVersionCode {
  result.hasAppVersionCode = NO;
  result.appVersionCode = @"";
  return self;
}
- (BOOL) hasAppVersionName {
  return result.hasAppVersionName;
}
- (NSString*) appVersionName {
  return result.appVersionName;
}
- (ObsoleteErrorReport_Builder*) setAppVersionName:(NSString*) value {
  result.hasAppVersionName = YES;
  result.appVersionName = value;
  return self;
}
- (ObsoleteErrorReport_Builder*) clearAppVersionName {
  result.hasAppVersionName = NO;
  result.appVersionName = @"";
  return self;
}
- (BOOL) hasPhoneModel {
  return result.hasPhoneModel;
}
- (NSString*) phoneModel {
  return result.phoneModel;
}
- (ObsoleteErrorReport_Builder*) setPhoneModel:(NSString*) value {
  result.hasPhoneModel = YES;
  result.phoneModel = value;
  return self;
}
- (ObsoleteErrorReport_Builder*) clearPhoneModel {
  result.hasPhoneModel = NO;
  result.phoneModel = @"";
  return self;
}
- (BOOL) hasBrand {
  return result.hasBrand;
}
- (NSString*) brand {
  return result.brand;
}
- (ObsoleteErrorReport_Builder*) setBrand:(NSString*) value {
  result.hasBrand = YES;
  result.brand = value;
  return self;
}
- (ObsoleteErrorReport_Builder*) clearBrand {
  result.hasBrand = NO;
  result.brand = @"";
  return self;
}
- (BOOL) hasProduct {
  return result.hasProduct;
}
- (NSString*) product {
  return result.product;
}
- (ObsoleteErrorReport_Builder*) setProduct:(NSString*) value {
  result.hasProduct = YES;
  result.product = value;
  return self;
}
- (ObsoleteErrorReport_Builder*) clearProduct {
  result.hasProduct = NO;
  result.product = @"";
  return self;
}
- (BOOL) hasOsVersion {
  return result.hasOsVersion;
}
- (NSString*) osVersion {
  return result.osVersion;
}
- (ObsoleteErrorReport_Builder*) setOsVersion:(NSString*) value {
  result.hasOsVersion = YES;
  result.osVersion = value;
  return self;
}
- (ObsoleteErrorReport_Builder*) clearOsVersion {
  result.hasOsVersion = NO;
  result.osVersion = @"";
  return self;
}
- (BOOL) hasTotalMemSize {
  return result.hasTotalMemSize;
}
- (int32_t) totalMemSize {
  return result.totalMemSize;
}
- (ObsoleteErrorReport_Builder*) setTotalMemSize:(int32_t) value {
  result.hasTotalMemSize = YES;
  result.totalMemSize = value;
  return self;
}
- (ObsoleteErrorReport_Builder*) clearTotalMemSize {
  result.hasTotalMemSize = NO;
  result.totalMemSize = 0;
  return self;
}
- (BOOL) hasAvailableMemSize {
  return result.hasAvailableMemSize;
}
- (int32_t) availableMemSize {
  return result.availableMemSize;
}
- (ObsoleteErrorReport_Builder*) setAvailableMemSize:(int32_t) value {
  result.hasAvailableMemSize = YES;
  result.availableMemSize = value;
  return self;
}
- (ObsoleteErrorReport_Builder*) clearAvailableMemSize {
  result.hasAvailableMemSize = NO;
  result.availableMemSize = 0;
  return self;
}
- (BOOL) hasStackTrace {
  return result.hasStackTrace;
}
- (NSString*) stackTrace {
  return result.stackTrace;
}
- (ObsoleteErrorReport_Builder*) setStackTrace:(NSString*) value {
  result.hasStackTrace = YES;
  result.stackTrace = value;
  return self;
}
- (ObsoleteErrorReport_Builder*) clearStackTrace {
  result.hasStackTrace = NO;
  result.stackTrace = @"";
  return self;
}
- (BOOL) hasUserAppStartTime {
  return result.hasUserAppStartTime;
}
- (NSString*) userAppStartTime {
  return result.userAppStartTime;
}
- (ObsoleteErrorReport_Builder*) setUserAppStartTime:(NSString*) value {
  result.hasUserAppStartTime = YES;
  result.userAppStartTime = value;
  return self;
}
- (ObsoleteErrorReport_Builder*) clearUserAppStartTime {
  result.hasUserAppStartTime = NO;
  result.userAppStartTime = @"";
  return self;
}
- (BOOL) hasUserAppCrashTime {
  return result.hasUserAppCrashTime;
}
- (NSString*) userAppCrashTime {
  return result.userAppCrashTime;
}
- (ObsoleteErrorReport_Builder*) setUserAppCrashTime:(NSString*) value {
  result.hasUserAppCrashTime = YES;
  result.userAppCrashTime = value;
  return self;
}
- (ObsoleteErrorReport_Builder*) clearUserAppCrashTime {
  result.hasUserAppCrashTime = NO;
  result.userAppCrashTime = @"";
  return self;
}
@end

@interface ErrorReport ()
@property (retain) NSString* reportId;
@property (retain) NSString* appVersionCode;
@property (retain) NSString* appVersionName;
@property (retain) NSString* phoneModel;
@property (retain) NSString* brand;
@property (retain) NSString* product;
@property (retain) NSString* osVersion;
@property int64_t totalMemSize;
@property int64_t availableMemSize;
@property (retain) NSString* stackTrace;
@property (retain) NSString* userAppStartTime;
@property (retain) NSString* userAppCrashTime;
@end

@implementation ErrorReport

- (BOOL) hasReportId {
  return !!hasReportId_;
}
- (void) setHasReportId:(BOOL) value_ {
  hasReportId_ = !!value_;
}
@synthesize reportId;
- (BOOL) hasAppVersionCode {
  return !!hasAppVersionCode_;
}
- (void) setHasAppVersionCode:(BOOL) value_ {
  hasAppVersionCode_ = !!value_;
}
@synthesize appVersionCode;
- (BOOL) hasAppVersionName {
  return !!hasAppVersionName_;
}
- (void) setHasAppVersionName:(BOOL) value_ {
  hasAppVersionName_ = !!value_;
}
@synthesize appVersionName;
- (BOOL) hasPhoneModel {
  return !!hasPhoneModel_;
}
- (void) setHasPhoneModel:(BOOL) value_ {
  hasPhoneModel_ = !!value_;
}
@synthesize phoneModel;
- (BOOL) hasBrand {
  return !!hasBrand_;
}
- (void) setHasBrand:(BOOL) value_ {
  hasBrand_ = !!value_;
}
@synthesize brand;
- (BOOL) hasProduct {
  return !!hasProduct_;
}
- (void) setHasProduct:(BOOL) value_ {
  hasProduct_ = !!value_;
}
@synthesize product;
- (BOOL) hasOsVersion {
  return !!hasOsVersion_;
}
- (void) setHasOsVersion:(BOOL) value_ {
  hasOsVersion_ = !!value_;
}
@synthesize osVersion;
- (BOOL) hasTotalMemSize {
  return !!hasTotalMemSize_;
}
- (void) setHasTotalMemSize:(BOOL) value_ {
  hasTotalMemSize_ = !!value_;
}
@synthesize totalMemSize;
- (BOOL) hasAvailableMemSize {
  return !!hasAvailableMemSize_;
}
- (void) setHasAvailableMemSize:(BOOL) value_ {
  hasAvailableMemSize_ = !!value_;
}
@synthesize availableMemSize;
- (BOOL) hasStackTrace {
  return !!hasStackTrace_;
}
- (void) setHasStackTrace:(BOOL) value_ {
  hasStackTrace_ = !!value_;
}
@synthesize stackTrace;
- (BOOL) hasUserAppStartTime {
  return !!hasUserAppStartTime_;
}
- (void) setHasUserAppStartTime:(BOOL) value_ {
  hasUserAppStartTime_ = !!value_;
}
@synthesize userAppStartTime;
- (BOOL) hasUserAppCrashTime {
  return !!hasUserAppCrashTime_;
}
- (void) setHasUserAppCrashTime:(BOOL) value_ {
  hasUserAppCrashTime_ = !!value_;
}
@synthesize userAppCrashTime;
- (void) dealloc {
  self.reportId = nil;
  self.appVersionCode = nil;
  self.appVersionName = nil;
  self.phoneModel = nil;
  self.brand = nil;
  self.product = nil;
  self.osVersion = nil;
  self.stackTrace = nil;
  self.userAppStartTime = nil;
  self.userAppCrashTime = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.reportId = @"";
    self.appVersionCode = @"";
    self.appVersionName = @"";
    self.phoneModel = @"";
    self.brand = @"";
    self.product = @"";
    self.osVersion = @"";
    self.totalMemSize = 0L;
    self.availableMemSize = 0L;
    self.stackTrace = @"";
    self.userAppStartTime = @"";
    self.userAppCrashTime = @"";
  }
  return self;
}
static ErrorReport* defaultErrorReportInstance = nil;
+ (void) initialize {
  if (self == [ErrorReport class]) {
    defaultErrorReportInstance = [[ErrorReport alloc] init];
  }
}
+ (ErrorReport*) defaultInstance {
  return defaultErrorReportInstance;
}
- (ErrorReport*) defaultInstance {
  return defaultErrorReportInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(ES_PBCodedOutputStream*) output {
  if (self.hasReportId) {
    [output writeString:1 value:self.reportId];
  }
  if (self.hasAppVersionCode) {
    [output writeString:2 value:self.appVersionCode];
  }
  if (self.hasAppVersionName) {
    [output writeString:3 value:self.appVersionName];
  }
  if (self.hasPhoneModel) {
    [output writeString:4 value:self.phoneModel];
  }
  if (self.hasBrand) {
    [output writeString:5 value:self.brand];
  }
  if (self.hasProduct) {
    [output writeString:6 value:self.product];
  }
  if (self.hasOsVersion) {
    [output writeString:7 value:self.osVersion];
  }
  if (self.hasTotalMemSize) {
    [output writeInt64:8 value:self.totalMemSize];
  }
  if (self.hasAvailableMemSize) {
    [output writeInt64:9 value:self.availableMemSize];
  }
  if (self.hasStackTrace) {
    [output writeString:10 value:self.stackTrace];
  }
  if (self.hasUserAppStartTime) {
    [output writeString:11 value:self.userAppStartTime];
  }
  if (self.hasUserAppCrashTime) {
    [output writeString:12 value:self.userAppCrashTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasReportId) {
    size_ += ES_computeStringSize(1, self.reportId);
  }
  if (self.hasAppVersionCode) {
    size_ += ES_computeStringSize(2, self.appVersionCode);
  }
  if (self.hasAppVersionName) {
    size_ += ES_computeStringSize(3, self.appVersionName);
  }
  if (self.hasPhoneModel) {
    size_ += ES_computeStringSize(4, self.phoneModel);
  }
  if (self.hasBrand) {
    size_ += ES_computeStringSize(5, self.brand);
  }
  if (self.hasProduct) {
    size_ += ES_computeStringSize(6, self.product);
  }
  if (self.hasOsVersion) {
    size_ += ES_computeStringSize(7, self.osVersion);
  }
  if (self.hasTotalMemSize) {
    size_ += ES_computeInt64Size(8, self.totalMemSize);
  }
  if (self.hasAvailableMemSize) {
    size_ += ES_computeInt64Size(9, self.availableMemSize);
  }
  if (self.hasStackTrace) {
    size_ += ES_computeStringSize(10, self.stackTrace);
  }
  if (self.hasUserAppStartTime) {
    size_ += ES_computeStringSize(11, self.userAppStartTime);
  }
  if (self.hasUserAppCrashTime) {
    size_ += ES_computeStringSize(12, self.userAppCrashTime);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ErrorReport*) parseFromData:(NSData*) data {
  return (ErrorReport*)[[[ErrorReport builder] mergeFromData:data] build];
}
+ (ErrorReport*) parseFromData:(NSData*) data extensionRegistry:(ES_PBExtensionRegistry*) extensionRegistry {
  return (ErrorReport*)[[[ErrorReport builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ErrorReport*) parseFromInputStream:(NSInputStream*) input {
  return (ErrorReport*)[[[ErrorReport builder] mergeFromInputStream:input] build];
}
+ (ErrorReport*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(ES_PBExtensionRegistry*) extensionRegistry {
  return (ErrorReport*)[[[ErrorReport builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ErrorReport*) parseFromCodedInputStream:(ES_PBCodedInputStream*) input {
  return (ErrorReport*)[[[ErrorReport builder] mergeFromCodedInputStream:input] build];
}
+ (ErrorReport*) parseFromCodedInputStream:(ES_PBCodedInputStream*) input extensionRegistry:(ES_PBExtensionRegistry*) extensionRegistry {
  return (ErrorReport*)[[[ErrorReport builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ErrorReport_Builder*) builder {
  return [[[ErrorReport_Builder alloc] init] autorelease];
}
+ (ErrorReport_Builder*) builderWithPrototype:(ErrorReport*) prototype {
  return [[ErrorReport builder] mergeFrom:prototype];
}
- (ErrorReport_Builder*) builder {
  return [ErrorReport builder];
}
- (ErrorReport_Builder*) toBuilder {
  return [ErrorReport builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasReportId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reportId", self.reportId];
  }
  if (self.hasAppVersionCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appVersionCode", self.appVersionCode];
  }
  if (self.hasAppVersionName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appVersionName", self.appVersionName];
  }
  if (self.hasPhoneModel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"phoneModel", self.phoneModel];
  }
  if (self.hasBrand) {
    [output appendFormat:@"%@%@: %@\n", indent, @"brand", self.brand];
  }
  if (self.hasProduct) {
    [output appendFormat:@"%@%@: %@\n", indent, @"product", self.product];
  }
  if (self.hasOsVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"osVersion", self.osVersion];
  }
  if (self.hasTotalMemSize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalMemSize", [NSNumber numberWithLongLong:self.totalMemSize]];
  }
  if (self.hasAvailableMemSize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"availableMemSize", [NSNumber numberWithLongLong:self.availableMemSize]];
  }
  if (self.hasStackTrace) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stackTrace", self.stackTrace];
  }
  if (self.hasUserAppStartTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userAppStartTime", self.userAppStartTime];
  }
  if (self.hasUserAppCrashTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userAppCrashTime", self.userAppCrashTime];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ErrorReport class]]) {
    return NO;
  }
  ErrorReport *otherMessage = other;
  return
      self.hasReportId == otherMessage.hasReportId &&
      (!self.hasReportId || [self.reportId isEqual:otherMessage.reportId]) &&
      self.hasAppVersionCode == otherMessage.hasAppVersionCode &&
      (!self.hasAppVersionCode || [self.appVersionCode isEqual:otherMessage.appVersionCode]) &&
      self.hasAppVersionName == otherMessage.hasAppVersionName &&
      (!self.hasAppVersionName || [self.appVersionName isEqual:otherMessage.appVersionName]) &&
      self.hasPhoneModel == otherMessage.hasPhoneModel &&
      (!self.hasPhoneModel || [self.phoneModel isEqual:otherMessage.phoneModel]) &&
      self.hasBrand == otherMessage.hasBrand &&
      (!self.hasBrand || [self.brand isEqual:otherMessage.brand]) &&
      self.hasProduct == otherMessage.hasProduct &&
      (!self.hasProduct || [self.product isEqual:otherMessage.product]) &&
      self.hasOsVersion == otherMessage.hasOsVersion &&
      (!self.hasOsVersion || [self.osVersion isEqual:otherMessage.osVersion]) &&
      self.hasTotalMemSize == otherMessage.hasTotalMemSize &&
      (!self.hasTotalMemSize || self.totalMemSize == otherMessage.totalMemSize) &&
      self.hasAvailableMemSize == otherMessage.hasAvailableMemSize &&
      (!self.hasAvailableMemSize || self.availableMemSize == otherMessage.availableMemSize) &&
      self.hasStackTrace == otherMessage.hasStackTrace &&
      (!self.hasStackTrace || [self.stackTrace isEqual:otherMessage.stackTrace]) &&
      self.hasUserAppStartTime == otherMessage.hasUserAppStartTime &&
      (!self.hasUserAppStartTime || [self.userAppStartTime isEqual:otherMessage.userAppStartTime]) &&
      self.hasUserAppCrashTime == otherMessage.hasUserAppCrashTime &&
      (!self.hasUserAppCrashTime || [self.userAppCrashTime isEqual:otherMessage.userAppCrashTime]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasReportId) {
    hashCode = hashCode * 31 + [self.reportId hash];
  }
  if (self.hasAppVersionCode) {
    hashCode = hashCode * 31 + [self.appVersionCode hash];
  }
  if (self.hasAppVersionName) {
    hashCode = hashCode * 31 + [self.appVersionName hash];
  }
  if (self.hasPhoneModel) {
    hashCode = hashCode * 31 + [self.phoneModel hash];
  }
  if (self.hasBrand) {
    hashCode = hashCode * 31 + [self.brand hash];
  }
  if (self.hasProduct) {
    hashCode = hashCode * 31 + [self.product hash];
  }
  if (self.hasOsVersion) {
    hashCode = hashCode * 31 + [self.osVersion hash];
  }
  if (self.hasTotalMemSize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.totalMemSize] hash];
  }
  if (self.hasAvailableMemSize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.availableMemSize] hash];
  }
  if (self.hasStackTrace) {
    hashCode = hashCode * 31 + [self.stackTrace hash];
  }
  if (self.hasUserAppStartTime) {
    hashCode = hashCode * 31 + [self.userAppStartTime hash];
  }
  if (self.hasUserAppCrashTime) {
    hashCode = hashCode * 31 + [self.userAppCrashTime hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ErrorReport_Builder()
@property (retain) ErrorReport* result;
@end

@implementation ErrorReport_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[ErrorReport alloc] init] autorelease];
  }
  return self;
}
- (ES_PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ErrorReport_Builder*) clear {
  self.result = [[[ErrorReport alloc] init] autorelease];
  return self;
}
- (ErrorReport_Builder*) clone {
  return [ErrorReport builderWithPrototype:result];
}
- (ErrorReport*) defaultInstance {
  return [ErrorReport defaultInstance];
}
- (ErrorReport*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ErrorReport*) buildPartial {
  ErrorReport* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (ErrorReport_Builder*) mergeFrom:(ErrorReport*) other {
  if (other == [ErrorReport defaultInstance]) {
    return self;
  }
  if (other.hasReportId) {
    [self setReportId:other.reportId];
  }
  if (other.hasAppVersionCode) {
    [self setAppVersionCode:other.appVersionCode];
  }
  if (other.hasAppVersionName) {
    [self setAppVersionName:other.appVersionName];
  }
  if (other.hasPhoneModel) {
    [self setPhoneModel:other.phoneModel];
  }
  if (other.hasBrand) {
    [self setBrand:other.brand];
  }
  if (other.hasProduct) {
    [self setProduct:other.product];
  }
  if (other.hasOsVersion) {
    [self setOsVersion:other.osVersion];
  }
  if (other.hasTotalMemSize) {
    [self setTotalMemSize:other.totalMemSize];
  }
  if (other.hasAvailableMemSize) {
    [self setAvailableMemSize:other.availableMemSize];
  }
  if (other.hasStackTrace) {
    [self setStackTrace:other.stackTrace];
  }
  if (other.hasUserAppStartTime) {
    [self setUserAppStartTime:other.userAppStartTime];
  }
  if (other.hasUserAppCrashTime) {
    [self setUserAppCrashTime:other.userAppCrashTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ErrorReport_Builder*) mergeFromCodedInputStream:(ES_PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[ES_PBExtensionRegistry emptyRegistry]];
}
- (ErrorReport_Builder*) mergeFromCodedInputStream:(ES_PBCodedInputStream*) input extensionRegistry:(ES_PBExtensionRegistry*) extensionRegistry {
  ES_PBUnknownFieldSet_Builder* unknownFields = [ES_PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setReportId:[input readString]];
        break;
      }
      case 18: {
        [self setAppVersionCode:[input readString]];
        break;
      }
      case 26: {
        [self setAppVersionName:[input readString]];
        break;
      }
      case 34: {
        [self setPhoneModel:[input readString]];
        break;
      }
      case 42: {
        [self setBrand:[input readString]];
        break;
      }
      case 50: {
        [self setProduct:[input readString]];
        break;
      }
      case 58: {
        [self setOsVersion:[input readString]];
        break;
      }
      case 64: {
        [self setTotalMemSize:[input readInt64]];
        break;
      }
      case 72: {
        [self setAvailableMemSize:[input readInt64]];
        break;
      }
      case 82: {
        [self setStackTrace:[input readString]];
        break;
      }
      case 90: {
        [self setUserAppStartTime:[input readString]];
        break;
      }
      case 98: {
        [self setUserAppCrashTime:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasReportId {
  return result.hasReportId;
}
- (NSString*) reportId {
  return result.reportId;
}
- (ErrorReport_Builder*) setReportId:(NSString*) value {
  result.hasReportId = YES;
  result.reportId = value;
  return self;
}
- (ErrorReport_Builder*) clearReportId {
  result.hasReportId = NO;
  result.reportId = @"";
  return self;
}
- (BOOL) hasAppVersionCode {
  return result.hasAppVersionCode;
}
- (NSString*) appVersionCode {
  return result.appVersionCode;
}
- (ErrorReport_Builder*) setAppVersionCode:(NSString*) value {
  result.hasAppVersionCode = YES;
  result.appVersionCode = value;
  return self;
}
- (ErrorReport_Builder*) clearAppVersionCode {
  result.hasAppVersionCode = NO;
  result.appVersionCode = @"";
  return self;
}
- (BOOL) hasAppVersionName {
  return result.hasAppVersionName;
}
- (NSString*) appVersionName {
  return result.appVersionName;
}
- (ErrorReport_Builder*) setAppVersionName:(NSString*) value {
  result.hasAppVersionName = YES;
  result.appVersionName = value;
  return self;
}
- (ErrorReport_Builder*) clearAppVersionName {
  result.hasAppVersionName = NO;
  result.appVersionName = @"";
  return self;
}
- (BOOL) hasPhoneModel {
  return result.hasPhoneModel;
}
- (NSString*) phoneModel {
  return result.phoneModel;
}
- (ErrorReport_Builder*) setPhoneModel:(NSString*) value {
  result.hasPhoneModel = YES;
  result.phoneModel = value;
  return self;
}
- (ErrorReport_Builder*) clearPhoneModel {
  result.hasPhoneModel = NO;
  result.phoneModel = @"";
  return self;
}
- (BOOL) hasBrand {
  return result.hasBrand;
}
- (NSString*) brand {
  return result.brand;
}
- (ErrorReport_Builder*) setBrand:(NSString*) value {
  result.hasBrand = YES;
  result.brand = value;
  return self;
}
- (ErrorReport_Builder*) clearBrand {
  result.hasBrand = NO;
  result.brand = @"";
  return self;
}
- (BOOL) hasProduct {
  return result.hasProduct;
}
- (NSString*) product {
  return result.product;
}
- (ErrorReport_Builder*) setProduct:(NSString*) value {
  result.hasProduct = YES;
  result.product = value;
  return self;
}
- (ErrorReport_Builder*) clearProduct {
  result.hasProduct = NO;
  result.product = @"";
  return self;
}
- (BOOL) hasOsVersion {
  return result.hasOsVersion;
}
- (NSString*) osVersion {
  return result.osVersion;
}
- (ErrorReport_Builder*) setOsVersion:(NSString*) value {
  result.hasOsVersion = YES;
  result.osVersion = value;
  return self;
}
- (ErrorReport_Builder*) clearOsVersion {
  result.hasOsVersion = NO;
  result.osVersion = @"";
  return self;
}
- (BOOL) hasTotalMemSize {
  return result.hasTotalMemSize;
}
- (int64_t) totalMemSize {
  return result.totalMemSize;
}
- (ErrorReport_Builder*) setTotalMemSize:(int64_t) value {
  result.hasTotalMemSize = YES;
  result.totalMemSize = value;
  return self;
}
- (ErrorReport_Builder*) clearTotalMemSize {
  result.hasTotalMemSize = NO;
  result.totalMemSize = 0L;
  return self;
}
- (BOOL) hasAvailableMemSize {
  return result.hasAvailableMemSize;
}
- (int64_t) availableMemSize {
  return result.availableMemSize;
}
- (ErrorReport_Builder*) setAvailableMemSize:(int64_t) value {
  result.hasAvailableMemSize = YES;
  result.availableMemSize = value;
  return self;
}
- (ErrorReport_Builder*) clearAvailableMemSize {
  result.hasAvailableMemSize = NO;
  result.availableMemSize = 0L;
  return self;
}
- (BOOL) hasStackTrace {
  return result.hasStackTrace;
}
- (NSString*) stackTrace {
  return result.stackTrace;
}
- (ErrorReport_Builder*) setStackTrace:(NSString*) value {
  result.hasStackTrace = YES;
  result.stackTrace = value;
  return self;
}
- (ErrorReport_Builder*) clearStackTrace {
  result.hasStackTrace = NO;
  result.stackTrace = @"";
  return self;
}
- (BOOL) hasUserAppStartTime {
  return result.hasUserAppStartTime;
}
- (NSString*) userAppStartTime {
  return result.userAppStartTime;
}
- (ErrorReport_Builder*) setUserAppStartTime:(NSString*) value {
  result.hasUserAppStartTime = YES;
  result.userAppStartTime = value;
  return self;
}
- (ErrorReport_Builder*) clearUserAppStartTime {
  result.hasUserAppStartTime = NO;
  result.userAppStartTime = @"";
  return self;
}
- (BOOL) hasUserAppCrashTime {
  return result.hasUserAppCrashTime;
}
- (NSString*) userAppCrashTime {
  return result.userAppCrashTime;
}
- (ErrorReport_Builder*) setUserAppCrashTime:(NSString*) value {
  result.hasUserAppCrashTime = YES;
  result.userAppCrashTime = value;
  return self;
}
- (ErrorReport_Builder*) clearUserAppCrashTime {
  result.hasUserAppCrashTime = NO;
  result.userAppCrashTime = @"";
  return self;
}
@end

@interface ObsoleteClientReportRequest ()
@property (retain) NSString* imsi;
@property (retain) NSString* surfingAccount;
@property int64_t syncUserId;
@property (retain) ES_PBAppendableArray * errorReportArray;
@end

@implementation ObsoleteClientReportRequest

- (BOOL) hasImsi {
  return !!hasImsi_;
}
- (void) setHasImsi:(BOOL) value_ {
  hasImsi_ = !!value_;
}
@synthesize imsi;
- (BOOL) hasSurfingAccount {
  return !!hasSurfingAccount_;
}
- (void) setHasSurfingAccount:(BOOL) value_ {
  hasSurfingAccount_ = !!value_;
}
@synthesize surfingAccount;
- (BOOL) hasSyncUserId {
  return !!hasSyncUserId_;
}
- (void) setHasSyncUserId:(BOOL) value_ {
  hasSyncUserId_ = !!value_;
}
@synthesize syncUserId;
@synthesize errorReportArray;
@dynamic errorReport;
- (void) dealloc {
  self.imsi = nil;
  self.surfingAccount = nil;
  self.errorReportArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.imsi = @"";
    self.surfingAccount = @"";
    self.syncUserId = 0L;
  }
  return self;
}
static ObsoleteClientReportRequest* defaultObsoleteClientReportRequestInstance = nil;
+ (void) initialize {
  if (self == [ObsoleteClientReportRequest class]) {
    defaultObsoleteClientReportRequestInstance = [[ObsoleteClientReportRequest alloc] init];
  }
}
+ (ObsoleteClientReportRequest*) defaultInstance {
  return defaultObsoleteClientReportRequestInstance;
}
- (ObsoleteClientReportRequest*) defaultInstance {
  return defaultObsoleteClientReportRequestInstance;
}
- (ES_PBArray *)errorReport {
  return errorReportArray;
}
- (ObsoleteErrorReport*)errorReportAtIndex:(NSUInteger)index {
  return [errorReportArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(ES_PBCodedOutputStream*) output {
  if (self.hasImsi) {
    [output writeString:1 value:self.imsi];
  }
  if (self.hasSurfingAccount) {
    [output writeString:2 value:self.surfingAccount];
  }
  if (self.hasSyncUserId) {
    [output writeInt64:3 value:self.syncUserId];
  }
  for (ObsoleteErrorReport *element in self.errorReportArray) {
    [output writeMessage:4 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasImsi) {
    size_ += ES_computeStringSize(1, self.imsi);
  }
  if (self.hasSurfingAccount) {
    size_ += ES_computeStringSize(2, self.surfingAccount);
  }
  if (self.hasSyncUserId) {
    size_ += ES_computeInt64Size(3, self.syncUserId);
  }
  for (ObsoleteErrorReport *element in self.errorReportArray) {
    size_ += ES_computeMessageSize(4, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ObsoleteClientReportRequest*) parseFromData:(NSData*) data {
  return (ObsoleteClientReportRequest*)[[[ObsoleteClientReportRequest builder] mergeFromData:data] build];
}
+ (ObsoleteClientReportRequest*) parseFromData:(NSData*) data extensionRegistry:(ES_PBExtensionRegistry*) extensionRegistry {
  return (ObsoleteClientReportRequest*)[[[ObsoleteClientReportRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ObsoleteClientReportRequest*) parseFromInputStream:(NSInputStream*) input {
  return (ObsoleteClientReportRequest*)[[[ObsoleteClientReportRequest builder] mergeFromInputStream:input] build];
}
+ (ObsoleteClientReportRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(ES_PBExtensionRegistry*) extensionRegistry {
  return (ObsoleteClientReportRequest*)[[[ObsoleteClientReportRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ObsoleteClientReportRequest*) parseFromCodedInputStream:(ES_PBCodedInputStream*) input {
  return (ObsoleteClientReportRequest*)[[[ObsoleteClientReportRequest builder] mergeFromCodedInputStream:input] build];
}
+ (ObsoleteClientReportRequest*) parseFromCodedInputStream:(ES_PBCodedInputStream*) input extensionRegistry:(ES_PBExtensionRegistry*) extensionRegistry {
  return (ObsoleteClientReportRequest*)[[[ObsoleteClientReportRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ObsoleteClientReportRequest_Builder*) builder {
  return [[[ObsoleteClientReportRequest_Builder alloc] init] autorelease];
}
+ (ObsoleteClientReportRequest_Builder*) builderWithPrototype:(ObsoleteClientReportRequest*) prototype {
  return [[ObsoleteClientReportRequest builder] mergeFrom:prototype];
}
- (ObsoleteClientReportRequest_Builder*) builder {
  return [ObsoleteClientReportRequest builder];
}
- (ObsoleteClientReportRequest_Builder*) toBuilder {
  return [ObsoleteClientReportRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasImsi) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imsi", self.imsi];
  }
  if (self.hasSurfingAccount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"surfingAccount", self.surfingAccount];
  }
  if (self.hasSyncUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"syncUserId", [NSNumber numberWithLongLong:self.syncUserId]];
  }
  for (ObsoleteErrorReport* element in self.errorReportArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"errorReport"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ObsoleteClientReportRequest class]]) {
    return NO;
  }
  ObsoleteClientReportRequest *otherMessage = other;
  return
      self.hasImsi == otherMessage.hasImsi &&
      (!self.hasImsi || [self.imsi isEqual:otherMessage.imsi]) &&
      self.hasSurfingAccount == otherMessage.hasSurfingAccount &&
      (!self.hasSurfingAccount || [self.surfingAccount isEqual:otherMessage.surfingAccount]) &&
      self.hasSyncUserId == otherMessage.hasSyncUserId &&
      (!self.hasSyncUserId || self.syncUserId == otherMessage.syncUserId) &&
      [self.errorReportArray isEqualToArray:otherMessage.errorReportArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasImsi) {
    hashCode = hashCode * 31 + [self.imsi hash];
  }
  if (self.hasSurfingAccount) {
    hashCode = hashCode * 31 + [self.surfingAccount hash];
  }
  if (self.hasSyncUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.syncUserId] hash];
  }
  for (ObsoleteErrorReport* element in self.errorReportArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ObsoleteClientReportRequest_Builder()
@property (retain) ObsoleteClientReportRequest* result;
@end

@implementation ObsoleteClientReportRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[ObsoleteClientReportRequest alloc] init] autorelease];
  }
  return self;
}
- (ES_PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ObsoleteClientReportRequest_Builder*) clear {
  self.result = [[[ObsoleteClientReportRequest alloc] init] autorelease];
  return self;
}
- (ObsoleteClientReportRequest_Builder*) clone {
  return [ObsoleteClientReportRequest builderWithPrototype:result];
}
- (ObsoleteClientReportRequest*) defaultInstance {
  return [ObsoleteClientReportRequest defaultInstance];
}
- (ObsoleteClientReportRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ObsoleteClientReportRequest*) buildPartial {
  ObsoleteClientReportRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (ObsoleteClientReportRequest_Builder*) mergeFrom:(ObsoleteClientReportRequest*) other {
  if (other == [ObsoleteClientReportRequest defaultInstance]) {
    return self;
  }
  if (other.hasImsi) {
    [self setImsi:other.imsi];
  }
  if (other.hasSurfingAccount) {
    [self setSurfingAccount:other.surfingAccount];
  }
  if (other.hasSyncUserId) {
    [self setSyncUserId:other.syncUserId];
  }
  if (other.errorReportArray.count > 0) {
    if (result.errorReportArray == nil) {
      result.errorReportArray = [[other.errorReportArray copyWithZone:[other.errorReportArray zone]] autorelease];
    } else {
      [result.errorReportArray appendArray:other.errorReportArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ObsoleteClientReportRequest_Builder*) mergeFromCodedInputStream:(ES_PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[ES_PBExtensionRegistry emptyRegistry]];
}
- (ObsoleteClientReportRequest_Builder*) mergeFromCodedInputStream:(ES_PBCodedInputStream*) input extensionRegistry:(ES_PBExtensionRegistry*) extensionRegistry {
  ES_PBUnknownFieldSet_Builder* unknownFields = [ES_PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setImsi:[input readString]];
        break;
      }
      case 18: {
        [self setSurfingAccount:[input readString]];
        break;
      }
      case 24: {
        [self setSyncUserId:[input readInt64]];
        break;
      }
      case 34: {
        ObsoleteErrorReport_Builder* subBuilder = [ObsoleteErrorReport builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addErrorReport:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasImsi {
  return result.hasImsi;
}
- (NSString*) imsi {
  return result.imsi;
}
- (ObsoleteClientReportRequest_Builder*) setImsi:(NSString*) value {
  result.hasImsi = YES;
  result.imsi = value;
  return self;
}
- (ObsoleteClientReportRequest_Builder*) clearImsi {
  result.hasImsi = NO;
  result.imsi = @"";
  return self;
}
- (BOOL) hasSurfingAccount {
  return result.hasSurfingAccount;
}
- (NSString*) surfingAccount {
  return result.surfingAccount;
}
- (ObsoleteClientReportRequest_Builder*) setSurfingAccount:(NSString*) value {
  result.hasSurfingAccount = YES;
  result.surfingAccount = value;
  return self;
}
- (ObsoleteClientReportRequest_Builder*) clearSurfingAccount {
  result.hasSurfingAccount = NO;
  result.surfingAccount = @"";
  return self;
}
- (BOOL) hasSyncUserId {
  return result.hasSyncUserId;
}
- (int64_t) syncUserId {
  return result.syncUserId;
}
- (ObsoleteClientReportRequest_Builder*) setSyncUserId:(int64_t) value {
  result.hasSyncUserId = YES;
  result.syncUserId = value;
  return self;
}
- (ObsoleteClientReportRequest_Builder*) clearSyncUserId {
  result.hasSyncUserId = NO;
  result.syncUserId = 0L;
  return self;
}
- (ES_PBAppendableArray *)errorReport {
  return result.errorReportArray;
}
- (ObsoleteErrorReport*)errorReportAtIndex:(NSUInteger)index {
  return [result errorReportAtIndex:index];
}
- (ObsoleteClientReportRequest_Builder *)addErrorReport:(ObsoleteErrorReport*)value {
  if (result.errorReportArray == nil) {
    result.errorReportArray = [ES_PBAppendableArray arrayWithValueType:ES_PBArrayValueTypeObject];
  }
  [result.errorReportArray addObject:value];
  return self;
}
- (ObsoleteClientReportRequest_Builder *)setErrorReportArray:(NSArray *)array {
  result.errorReportArray = [ES_PBAppendableArray arrayWithArray:array valueType:ES_PBArrayValueTypeObject];
  return self;
}
- (ObsoleteClientReportRequest_Builder *)setErrorReportValues:(const ObsoleteErrorReport* *)values count:(NSUInteger)count {
  result.errorReportArray = [ES_PBAppendableArray arrayWithValues:values count:count valueType:ES_PBArrayValueTypeObject];
  return self;
}
- (ObsoleteClientReportRequest_Builder *)clearErrorReport {
  result.errorReportArray = nil;
  return self;
}
@end

@interface ClientReportRequest ()
@property (retain) NSString* imsi;
@property (retain) NSString* surfingAccount;
@property int64_t syncUserId;
@property (retain) ES_PBAppendableArray * errorReportArray;
@end

@implementation ClientReportRequest

- (BOOL) hasImsi {
  return !!hasImsi_;
}
- (void) setHasImsi:(BOOL) value_ {
  hasImsi_ = !!value_;
}
@synthesize imsi;
- (BOOL) hasSurfingAccount {
  return !!hasSurfingAccount_;
}
- (void) setHasSurfingAccount:(BOOL) value_ {
  hasSurfingAccount_ = !!value_;
}
@synthesize surfingAccount;
- (BOOL) hasSyncUserId {
  return !!hasSyncUserId_;
}
- (void) setHasSyncUserId:(BOOL) value_ {
  hasSyncUserId_ = !!value_;
}
@synthesize syncUserId;
@synthesize errorReportArray;
@dynamic errorReport;
- (void) dealloc {
  self.imsi = nil;
  self.surfingAccount = nil;
  self.errorReportArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.imsi = @"";
    self.surfingAccount = @"";
    self.syncUserId = 0L;
  }
  return self;
}
static ClientReportRequest* defaultClientReportRequestInstance = nil;
+ (void) initialize {
  if (self == [ClientReportRequest class]) {
    defaultClientReportRequestInstance = [[ClientReportRequest alloc] init];
  }
}
+ (ClientReportRequest*) defaultInstance {
  return defaultClientReportRequestInstance;
}
- (ClientReportRequest*) defaultInstance {
  return defaultClientReportRequestInstance;
}
- (ES_PBArray *)errorReport {
  return errorReportArray;
}
- (ErrorReport*)errorReportAtIndex:(NSUInteger)index {
  return [errorReportArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(ES_PBCodedOutputStream*) output {
  if (self.hasImsi) {
    [output writeString:1 value:self.imsi];
  }
  if (self.hasSurfingAccount) {
    [output writeString:2 value:self.surfingAccount];
  }
  if (self.hasSyncUserId) {
    [output writeInt64:3 value:self.syncUserId];
  }
  for (ErrorReport *element in self.errorReportArray) {
    [output writeMessage:4 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasImsi) {
    size_ += ES_computeStringSize(1, self.imsi);
  }
  if (self.hasSurfingAccount) {
    size_ += ES_computeStringSize(2, self.surfingAccount);
  }
  if (self.hasSyncUserId) {
    size_ += ES_computeInt64Size(3, self.syncUserId);
  }
  for (ErrorReport *element in self.errorReportArray) {
    size_ += ES_computeMessageSize(4, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ClientReportRequest*) parseFromData:(NSData*) data {
  return (ClientReportRequest*)[[[ClientReportRequest builder] mergeFromData:data] build];
}
+ (ClientReportRequest*) parseFromData:(NSData*) data extensionRegistry:(ES_PBExtensionRegistry*) extensionRegistry {
  return (ClientReportRequest*)[[[ClientReportRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ClientReportRequest*) parseFromInputStream:(NSInputStream*) input {
  return (ClientReportRequest*)[[[ClientReportRequest builder] mergeFromInputStream:input] build];
}
+ (ClientReportRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(ES_PBExtensionRegistry*) extensionRegistry {
  return (ClientReportRequest*)[[[ClientReportRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClientReportRequest*) parseFromCodedInputStream:(ES_PBCodedInputStream*) input {
  return (ClientReportRequest*)[[[ClientReportRequest builder] mergeFromCodedInputStream:input] build];
}
+ (ClientReportRequest*) parseFromCodedInputStream:(ES_PBCodedInputStream*) input extensionRegistry:(ES_PBExtensionRegistry*) extensionRegistry {
  return (ClientReportRequest*)[[[ClientReportRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClientReportRequest_Builder*) builder {
  return [[[ClientReportRequest_Builder alloc] init] autorelease];
}
+ (ClientReportRequest_Builder*) builderWithPrototype:(ClientReportRequest*) prototype {
  return [[ClientReportRequest builder] mergeFrom:prototype];
}
- (ClientReportRequest_Builder*) builder {
  return [ClientReportRequest builder];
}
- (ClientReportRequest_Builder*) toBuilder {
  return [ClientReportRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasImsi) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imsi", self.imsi];
  }
  if (self.hasSurfingAccount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"surfingAccount", self.surfingAccount];
  }
  if (self.hasSyncUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"syncUserId", [NSNumber numberWithLongLong:self.syncUserId]];
  }
  for (ErrorReport* element in self.errorReportArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"errorReport"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ClientReportRequest class]]) {
    return NO;
  }
  ClientReportRequest *otherMessage = other;
  return
      self.hasImsi == otherMessage.hasImsi &&
      (!self.hasImsi || [self.imsi isEqual:otherMessage.imsi]) &&
      self.hasSurfingAccount == otherMessage.hasSurfingAccount &&
      (!self.hasSurfingAccount || [self.surfingAccount isEqual:otherMessage.surfingAccount]) &&
      self.hasSyncUserId == otherMessage.hasSyncUserId &&
      (!self.hasSyncUserId || self.syncUserId == otherMessage.syncUserId) &&
      [self.errorReportArray isEqualToArray:otherMessage.errorReportArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasImsi) {
    hashCode = hashCode * 31 + [self.imsi hash];
  }
  if (self.hasSurfingAccount) {
    hashCode = hashCode * 31 + [self.surfingAccount hash];
  }
  if (self.hasSyncUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.syncUserId] hash];
  }
  for (ErrorReport* element in self.errorReportArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ClientReportRequest_Builder()
@property (retain) ClientReportRequest* result;
@end

@implementation ClientReportRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[ClientReportRequest alloc] init] autorelease];
  }
  return self;
}
- (ES_PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ClientReportRequest_Builder*) clear {
  self.result = [[[ClientReportRequest alloc] init] autorelease];
  return self;
}
- (ClientReportRequest_Builder*) clone {
  return [ClientReportRequest builderWithPrototype:result];
}
- (ClientReportRequest*) defaultInstance {
  return [ClientReportRequest defaultInstance];
}
- (ClientReportRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ClientReportRequest*) buildPartial {
  ClientReportRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (ClientReportRequest_Builder*) mergeFrom:(ClientReportRequest*) other {
  if (other == [ClientReportRequest defaultInstance]) {
    return self;
  }
  if (other.hasImsi) {
    [self setImsi:other.imsi];
  }
  if (other.hasSurfingAccount) {
    [self setSurfingAccount:other.surfingAccount];
  }
  if (other.hasSyncUserId) {
    [self setSyncUserId:other.syncUserId];
  }
  if (other.errorReportArray.count > 0) {
    if (result.errorReportArray == nil) {
      result.errorReportArray = [[other.errorReportArray copyWithZone:[other.errorReportArray zone]] autorelease];
    } else {
      [result.errorReportArray appendArray:other.errorReportArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ClientReportRequest_Builder*) mergeFromCodedInputStream:(ES_PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[ES_PBExtensionRegistry emptyRegistry]];
}
- (ClientReportRequest_Builder*) mergeFromCodedInputStream:(ES_PBCodedInputStream*) input extensionRegistry:(ES_PBExtensionRegistry*) extensionRegistry {
  ES_PBUnknownFieldSet_Builder* unknownFields = [ES_PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setImsi:[input readString]];
        break;
      }
      case 18: {
        [self setSurfingAccount:[input readString]];
        break;
      }
      case 24: {
        [self setSyncUserId:[input readInt64]];
        break;
      }
      case 34: {
        ErrorReport_Builder* subBuilder = [ErrorReport builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addErrorReport:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasImsi {
  return result.hasImsi;
}
- (NSString*) imsi {
  return result.imsi;
}
- (ClientReportRequest_Builder*) setImsi:(NSString*) value {
  result.hasImsi = YES;
  result.imsi = value;
  return self;
}
- (ClientReportRequest_Builder*) clearImsi {
  result.hasImsi = NO;
  result.imsi = @"";
  return self;
}
- (BOOL) hasSurfingAccount {
  return result.hasSurfingAccount;
}
- (NSString*) surfingAccount {
  return result.surfingAccount;
}
- (ClientReportRequest_Builder*) setSurfingAccount:(NSString*) value {
  result.hasSurfingAccount = YES;
  result.surfingAccount = value;
  return self;
}
- (ClientReportRequest_Builder*) clearSurfingAccount {
  result.hasSurfingAccount = NO;
  result.surfingAccount = @"";
  return self;
}
- (BOOL) hasSyncUserId {
  return result.hasSyncUserId;
}
- (int64_t) syncUserId {
  return result.syncUserId;
}
- (ClientReportRequest_Builder*) setSyncUserId:(int64_t) value {
  result.hasSyncUserId = YES;
  result.syncUserId = value;
  return self;
}
- (ClientReportRequest_Builder*) clearSyncUserId {
  result.hasSyncUserId = NO;
  result.syncUserId = 0L;
  return self;
}
- (ES_PBAppendableArray *)errorReport {
  return result.errorReportArray;
}
- (ErrorReport*)errorReportAtIndex:(NSUInteger)index {
  return [result errorReportAtIndex:index];
}
- (ClientReportRequest_Builder *)addErrorReport:(ErrorReport*)value {
  if (result.errorReportArray == nil) {
    result.errorReportArray = [ES_PBAppendableArray arrayWithValueType:ES_PBArrayValueTypeObject];
  }
  [result.errorReportArray addObject:value];
  return self;
}
- (ClientReportRequest_Builder *)setErrorReportArray:(NSArray *)array {
  result.errorReportArray = [ES_PBAppendableArray arrayWithArray:array valueType:ES_PBArrayValueTypeObject];
  return self;
}
- (ClientReportRequest_Builder *)setErrorReportValues:(const ErrorReport* *)values count:(NSUInteger)count {
  result.errorReportArray = [ES_PBAppendableArray arrayWithValues:values count:count valueType:ES_PBArrayValueTypeObject];
  return self;
}
- (ClientReportRequest_Builder *)clearErrorReport {
  result.errorReportArray = nil;
  return self;
}
@end

@interface PlainClientReportRequest ()
@property (retain) NSString* mobileNo;
@property (retain) NSData* plainTrace;
@end

@implementation PlainClientReportRequest

- (BOOL) hasMobileNo {
  return !!hasMobileNo_;
}
- (void) setHasMobileNo:(BOOL) value_ {
  hasMobileNo_ = !!value_;
}
@synthesize mobileNo;
- (BOOL) hasPlainTrace {
  return !!hasPlainTrace_;
}
- (void) setHasPlainTrace:(BOOL) value_ {
  hasPlainTrace_ = !!value_;
}
@synthesize plainTrace;
- (void) dealloc {
  self.mobileNo = nil;
  self.plainTrace = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.mobileNo = @"";
    self.plainTrace = [NSData data];
  }
  return self;
}
static PlainClientReportRequest* defaultPlainClientReportRequestInstance = nil;
+ (void) initialize {
  if (self == [PlainClientReportRequest class]) {
    defaultPlainClientReportRequestInstance = [[PlainClientReportRequest alloc] init];
  }
}
+ (PlainClientReportRequest*) defaultInstance {
  return defaultPlainClientReportRequestInstance;
}
- (PlainClientReportRequest*) defaultInstance {
  return defaultPlainClientReportRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasMobileNo) {
    return NO;
  }
  if (!self.hasPlainTrace) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(ES_PBCodedOutputStream*) output {
  if (self.hasMobileNo) {
    [output writeString:1 value:self.mobileNo];
  }
  if (self.hasPlainTrace) {
    [output writeData:2 value:self.plainTrace];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMobileNo) {
    size_ += ES_computeStringSize(1, self.mobileNo);
  }
  if (self.hasPlainTrace) {
    size_ += ES_computeDataSize(2, self.plainTrace);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PlainClientReportRequest*) parseFromData:(NSData*) data {
  return (PlainClientReportRequest*)[[[PlainClientReportRequest builder] mergeFromData:data] build];
}
+ (PlainClientReportRequest*) parseFromData:(NSData*) data extensionRegistry:(ES_PBExtensionRegistry*) extensionRegistry {
  return (PlainClientReportRequest*)[[[PlainClientReportRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PlainClientReportRequest*) parseFromInputStream:(NSInputStream*) input {
  return (PlainClientReportRequest*)[[[PlainClientReportRequest builder] mergeFromInputStream:input] build];
}
+ (PlainClientReportRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(ES_PBExtensionRegistry*) extensionRegistry {
  return (PlainClientReportRequest*)[[[PlainClientReportRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PlainClientReportRequest*) parseFromCodedInputStream:(ES_PBCodedInputStream*) input {
  return (PlainClientReportRequest*)[[[PlainClientReportRequest builder] mergeFromCodedInputStream:input] build];
}
+ (PlainClientReportRequest*) parseFromCodedInputStream:(ES_PBCodedInputStream*) input extensionRegistry:(ES_PBExtensionRegistry*) extensionRegistry {
  return (PlainClientReportRequest*)[[[PlainClientReportRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PlainClientReportRequest_Builder*) builder {
  return [[[PlainClientReportRequest_Builder alloc] init] autorelease];
}
+ (PlainClientReportRequest_Builder*) builderWithPrototype:(PlainClientReportRequest*) prototype {
  return [[PlainClientReportRequest builder] mergeFrom:prototype];
}
- (PlainClientReportRequest_Builder*) builder {
  return [PlainClientReportRequest builder];
}
- (PlainClientReportRequest_Builder*) toBuilder {
  return [PlainClientReportRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMobileNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mobileNo", self.mobileNo];
  }
  if (self.hasPlainTrace) {
    [output appendFormat:@"%@%@: %@\n", indent, @"plainTrace", self.plainTrace];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PlainClientReportRequest class]]) {
    return NO;
  }
  PlainClientReportRequest *otherMessage = other;
  return
      self.hasMobileNo == otherMessage.hasMobileNo &&
      (!self.hasMobileNo || [self.mobileNo isEqual:otherMessage.mobileNo]) &&
      self.hasPlainTrace == otherMessage.hasPlainTrace &&
      (!self.hasPlainTrace || [self.plainTrace isEqual:otherMessage.plainTrace]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasMobileNo) {
    hashCode = hashCode * 31 + [self.mobileNo hash];
  }
  if (self.hasPlainTrace) {
    hashCode = hashCode * 31 + [self.plainTrace hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PlainClientReportRequest_Builder()
@property (retain) PlainClientReportRequest* result;
@end

@implementation PlainClientReportRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PlainClientReportRequest alloc] init] autorelease];
  }
  return self;
}
- (ES_PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PlainClientReportRequest_Builder*) clear {
  self.result = [[[PlainClientReportRequest alloc] init] autorelease];
  return self;
}
- (PlainClientReportRequest_Builder*) clone {
  return [PlainClientReportRequest builderWithPrototype:result];
}
- (PlainClientReportRequest*) defaultInstance {
  return [PlainClientReportRequest defaultInstance];
}
- (PlainClientReportRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PlainClientReportRequest*) buildPartial {
  PlainClientReportRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PlainClientReportRequest_Builder*) mergeFrom:(PlainClientReportRequest*) other {
  if (other == [PlainClientReportRequest defaultInstance]) {
    return self;
  }
  if (other.hasMobileNo) {
    [self setMobileNo:other.mobileNo];
  }
  if (other.hasPlainTrace) {
    [self setPlainTrace:other.plainTrace];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PlainClientReportRequest_Builder*) mergeFromCodedInputStream:(ES_PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[ES_PBExtensionRegistry emptyRegistry]];
}
- (PlainClientReportRequest_Builder*) mergeFromCodedInputStream:(ES_PBCodedInputStream*) input extensionRegistry:(ES_PBExtensionRegistry*) extensionRegistry {
  ES_PBUnknownFieldSet_Builder* unknownFields = [ES_PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setMobileNo:[input readString]];
        break;
      }
      case 18: {
        [self setPlainTrace:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasMobileNo {
  return result.hasMobileNo;
}
- (NSString*) mobileNo {
  return result.mobileNo;
}
- (PlainClientReportRequest_Builder*) setMobileNo:(NSString*) value {
  result.hasMobileNo = YES;
  result.mobileNo = value;
  return self;
}
- (PlainClientReportRequest_Builder*) clearMobileNo {
  result.hasMobileNo = NO;
  result.mobileNo = @"";
  return self;
}
- (BOOL) hasPlainTrace {
  return result.hasPlainTrace;
}
- (NSData*) plainTrace {
  return result.plainTrace;
}
- (PlainClientReportRequest_Builder*) setPlainTrace:(NSData*) value {
  result.hasPlainTrace = YES;
  result.plainTrace = value;
  return self;
}
- (PlainClientReportRequest_Builder*) clearPlainTrace {
  result.hasPlainTrace = NO;
  result.plainTrace = [NSData data];
  return self;
}
@end

